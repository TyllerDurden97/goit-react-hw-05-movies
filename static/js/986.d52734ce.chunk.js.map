{"version":3,"file":"static/js/986.d52734ce.chunk.js","mappings":"8PAESA,EAAU,mCACVC,EAAW,gCAGLC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BC,GAA/B,0FAEiBC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,iCAA8CD,EAA9C,iCAA8EG,EAA9E,YAFjB,8EAKSE,QAAQC,IAAR,MACM,IAAIC,MAAM,KAAMC,SAN/B,wFAcA,MAjBG,SAGYN,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,SCLf,EAA4B,yBAA5B,EAAkE,0BAAlE,EAA2G,4BAA3G,EAAoJ,0BAApJ,EAA0L,yB,kBCyF1L,EAnFe,WAAO,IAAD,EAClB,GAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMb,EAAK,UAAGY,EAAaE,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BV,EAAAA,EAAAA,UAAS,MAAnC,eAAOW,EAAP,KAAcC,EAAd,KAmCA,OA1BAC,EAAAA,EAAAA,YAAU,WACO,KAAVnB,IACD,iBAAC,qFACEU,EAAU,WADZ,SAEQX,EAAeC,GACjBoB,MAAK,SAAAC,GACH,GAAkC,IAA9BA,EAAMC,KAAKC,QAAQC,OAGpB,OAFAd,EAAU,iBACVF,EAAU,IAGbA,EAAUa,EAAMC,KAAKC,SACrBb,EAAU,OACZ,IACAe,OAAM,SAAAR,GACJC,EAASD,GACTf,QAAQC,IAAIc,GACZS,EAAAA,OAAAA,KAAY,qBAAqBC,eACjCjB,EAAU,QACVF,EAAU,GACZ,IAlBN,0CAAD,EAqBL,GAAE,CAACR,KAID,gCACIiB,IAAS,SAAC,KAAD,CAAUW,GAAI,aAExB,kBACGC,SArCkB,SAAAC,GACxBA,EAAMC,iBACNlB,EAAgB,CAAEb,MAAO8B,EAAME,OAAOC,SAASC,MAAMC,OAEvD,EAkCQC,UAAWC,EAFd,WAIG,kBACGC,KAAK,QACLC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZN,UAAWC,KAEd,mBACGE,KAAK,SACLH,UAAWC,EAFd,SAGC,eAGQ,YAAX5B,IAAwB,SAACkC,EAAA,EAAD,IACb,aAAXlC,IAAyB,yBAAK,0CAC/B,eAAI2B,UAAWC,EAAf,SACI9B,EAAOqC,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OAAO,yBACJ,SAAC,KAAD,CAAMlB,GAAE,UAAKiB,GACVE,MAAO,CAAEC,KAAMjC,GACfqB,UAAWC,EAFd,SAIIS,KALSD,EAQlB,QAMZ,C","sources":["services/fetchSearchMov.js","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movie.module.css?ed9b","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n   const API_KEY = '80b919ebaba440b66b502ccefd484b0d';\n   const BASE_URL = 'https://api.themoviedb.org/3/';\n\n\nasync function fetchSearchMov (query) {\n   try {\n    return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1`)\n    }   \n      catch(error) {\n         console.log(error);\n         throw new Error(error.message);\n      };\n};\n\n\n\n\n// https://api.themoviedb.org/3/search/movie\nexport default fetchSearchMov;","// extracted by mini-css-extract-plugin\nexport default {\"movieForm\":\"Movie_movieForm__B1504\",\"movieInput\":\"Movie_movieInput__2LCE9\",\"movieFormBtn\":\"Movie_movieFormBtn__fBMmm\",\"moviesList\":\"Movie_moviesList__kKuXe\",\"movieLink\":\"Movie_movieLink__gv8ab\"};","import { React, useEffect, useState } from \"react\";\nimport { Link, useSearchParams, useLocation, Navigate } from \"react-router-dom\";\nimport fetchSearchMov from \"../../services/fetchSearchMov\";\nimport { Loader } from 'components/Loader/Loader';\nimport css from 'pages/Movies/Movie.module.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst Movies = () => {\n   const [movies, setMovies] = useState([]);\n   const [status, setStatus] = useState('idle');\n   const [searchParams, setSearchParams] = useSearchParams();\n   const query = searchParams.get('query') ?? '';\n   const location = useLocation();\n   const [error, setError] = useState(null);\n\n\n   const handleSubmitSearch = event => {\n      event.preventDefault();\n      setSearchParams({ query: event.target.elements.input.value });\n      // event.target.elements.input.value = '';\n   };\n\n   useEffect(() => {\n      if (query !== '') {\n         (async () => {\n            setStatus('pending');\n            await fetchSearchMov(query)\n               .then(movie => {\n                  if (movie.data.results.length === 0) {\n                     setStatus('rejected')\n                     setMovies([])\n                     return;\n                  };\n                  setMovies(movie.data.results);\n                  setStatus('idle');\n               })\n               .catch(error => {\n                  setError(error);\n                  console.log(error)\n                  Notify.info(\"404 page not found\".toUpperCase());\n                  setStatus('idle');\n                  setMovies([]);\n               });\n         })()\n      };\n   }, [query]);\n\n\n   return (\n      <>\n         {error && <Navigate to={'/movies'} />}\n\n         <form\n            onSubmit={handleSubmitSearch}\n            className={css.movieForm}\n         >\n            <input\n               name=\"input\"\n               type=\"text\"\n               autoComplete=\"off\"\n               autoFocus\n               placeholder=\"Search movies\"\n               className={css.movieInput}\n            />\n            <button\n               type=\"submit\"\n               className={css.movieFormBtn}\n            > Search\n            </button>\n         </form>\n         {status === 'pending' && <Loader />}\n         {status === 'rejected' && <div>There are no movies with this title.</div>}\n         <ol className={css.moviesList}>\n            {movies.map(({ id, title }) => {\n               return <li key={id}>\n                  <Link to={`${id}`}\n                     state={{ from: location }}\n                     className={css.movieLink}\n                  >\n                     {title}\n                  </Link>\n               </li>\n            })\n            }\n         </ol>\n\n      </>\n   )\n};\n\nexport default Movies;\n\n"],"names":["API_KEY","BASE_URL","fetchSearchMov","query","axios","console","log","Error","message","useState","movies","setMovies","status","setStatus","useSearchParams","searchParams","setSearchParams","get","location","useLocation","error","setError","useEffect","then","movie","data","results","length","catch","Notify","toUpperCase","to","onSubmit","event","preventDefault","target","elements","input","value","className","css","name","type","autoComplete","autoFocus","placeholder","Loader","map","id","title","state","from"],"sourceRoot":""}